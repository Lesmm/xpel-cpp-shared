buildscript {
    def kotlin_version =
            rootProject.ext.has("kotlin_version") ? rootProject.ext.get("kotlin_version") :
                    rootProject.ext.has("kotlinVersion") ? rootProject.ext.get("kotlinVersion")
                            : project.properties["VisionCamera_kotlinVersion"]
    println("[XPEL_CPP_SHARED] >>>>> kotlin_version: $kotlin_version")

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        google()
        jcenter()
        mavenLocal()
        mavenCentral()

        // ----------------- publish to maven -----------------
        maven {
            allowInsecureProtocol = true
            url "http://maven.xpel.local/repository/android_release/"
        }
        maven {
            allowInsecureProtocol = true
            url "http://maven.xpel.local/repository/android_snapshots/"
        }
        // ----------------- publish to maven -----------------
    }

    dependencies {
        classpath "com.android.tools.build:gradle:7.4.2"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        // ----------------- publish to maven -----------------
        classpath 'com.xpel.lib.build:buildhelper:1.0.0_gradle7.2-SNAPSHOT'
        // ----------------- publish to maven -----------------
    }
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"

def safeExtGet(prop, fallback) {
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

def buildType() {
    String string = getGradle().getStartParameter().getTaskRequests()["args"].toString()
    return string.contains("Release") ? "release" : "debug"
}

allprojects {
    repositories {
        google()
        jcenter()
        mavenLocal()
        mavenCentral()

        // ----------------- publish to maven -----------------
        maven {
            allowInsecureProtocol = true
            url "http://maven.xpel.local/repository/android_release/"
        }
        maven {
            allowInsecureProtocol = true
            url "http://maven.xpel.local/repository/android_snapshots/"
        }
        // ----------------- publish to maven -----------------
    }
}

repositories {
    google()
    jcenter()
    mavenLocal()
    mavenCentral()

    // ----------------- publish to maven -----------------
    maven {
        allowInsecureProtocol = true
        url "http://maven.xpel.local/repository/android_release/"
    }
    maven {
        allowInsecureProtocol = true
        url "http://maven.xpel.local/repository/android_snapshots/"
    }
    // ----------------- publish to maven -----------------
}

android {
    namespace "com.xpel.android.cpp.shared"

    ndkVersion "20.1.5948944" // 7.0.4
    ndkVersion "21.4.7075529" // 7.0.5
//    ndkVersion "23.0.7599858" // 7.0.7
//    ndkVersion "23.1.7779620" // 7.0.8

    defaultConfig {
        minSdkVersion safeExtGet("minSdkVersion", 24)
        compileSdkVersion safeExtGet("compileSdkVersion", 33)
        targetSdkVersion safeExtGet("targetSdkVersion", 33)
        versionCode 1
        versionName "1.0"

        externalNativeBuild {
            cmake {
//                cppFlags "-O2 -frtti -fexceptions -Wall -Wno-unused-variable -fstack-protector-all"
                arguments "-DANDROID_STL=c++_shared"
            }
        }
    }


//    sourceSets {
//
//        main {
//            manifest.srcFile './AndroidManifest.xml'
//
//            java {
//                // Specify the source directory for your Java/Kotlin files
//                srcDirs = ['build/src/main/java/']
//            }
//
//        }
//
//    }

    kotlinOptions {
        jvmTarget = '11'
//        freeCompilerArgs += "-Xskip-metadata-version-check"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    // Used to override the NDK path/version on internal CI or by allowing
    // users to customize the NDK path/version from their root project (e.g. for M1 support)
//    if (rootProject.hasProperty("ndkPath")) {
//        ndkPath rootProject.ext.ndkPath
//    }
//    if (rootProject.hasProperty("ndkVersion")) {
//        ndkVersion rootProject.ext.ndkVersion
//    }
//    println("[XPEL_CPP_SHARED] >>>>> ndkPath: $ndkPath, ndkVersion: $ndkVersion")

//    buildFeatures {
//        prefab true
//        prefabPublishing true
//    }

//    prefab {
//        VisionCameraPipeline {
//            headers "${project.buildDir}/headers/vision_camera_pipeline/"
//        }
//    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    packagingOptions {
        doNotStrip buildType() == "debug" ? "**/**/*.so" : ""
//        excludes = [
//                // https://discuss.kotlinlang.org/t/getting-unresolved-reference-error-in-kotlin-android-library-project/6365
//                "META-INF",
//                "META-INF/**",
//                "**/libfbjni.so",
//                "**/libc++_shared.so"
//        ]
    }
}

dependencies {

}

// ----------------- publish to maven -----------------
apply from: "xpel_module_publish.gradle"
// ----------------- publish to maven -----------------
